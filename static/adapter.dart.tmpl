/*%ADAPTER_IMPORTS%*/

/*%TEST_IMPORTS%*/

class AdapterConfiguration extends unittest.SimpleConfiguration {
  bool get autoStart => false;

  void onDone(success) {
    try {
      super.onDone(success);
    } catch(e) {};
    js.context['__karma__'].callMethod('complete');
  }

  void onTestStart(unittest.TestCase testCase) {
    super.onTestStart(testCase);
  }

  void onTestResult(unittest.TestCase testCase) {
    var suites = testCase.description.split(unittest.groupSep);
    var description = suites.removeLast();

    var logData = [];
    if (testCase.result != unittest.PASS) {
      logData.add(testCase.message);
      logData.add(testCase.stackTrace.toString());
    }
    js.context['__karma__'].callMethod('result',
      [new js.JsObject.jsify({
        'id': testCase.id,
        'description': description,
        'success': testCase.result == unittest.PASS,
        'suite': suites,
        'skipped': !testCase.enabled,
        'log': logData,
        'time': testCase.runningTime.inMilliseconds
      })]
    );
  }

  void onLogMessage(unittest.TestCase testCase, String message) {
    js.context['__karma__'].callMethod('info', [new js.JsObject.jsify({
      'dump': message
    })]);
  }

  void onSummary(int passed, int failed, int errors,
      List<unittest.TestCase> results, String uncaughtError) {
    if (uncaughtError != null) {
      js.context['__karma__'].callMethod('error', [uncaughtError]);
    }
    // it's OK to print the default summary into the console
    super.onSummary(passed, failed, errors, results, uncaughtError);
  }
}

main() {
  // Change the groupSeparator, as the default " " is commonly used in spec
  // descriptions, which screws it up when we try to parse the original suites.
  unittest.groupSep = '#';
  unittest.unittestConfiguration = new AdapterConfiguration();

/*%TEST_MAIN_CALLS%*/

  js.context['__karma__']['start'] = () {};
  js.context['__karma__'].callMethod('info', [
    new js.JsObject.jsify({'total': unittest.testCases.length})]);
  unittest.runTests();
}

